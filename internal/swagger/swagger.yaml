definitions:
  errors.Error:
    properties:
      code:
        type: integer
      detail:
        type: string
      id:
        type: string
      status:
        type: string
    type: object
  schema.Captcha:
    properties:
      captcha_id:
        description: Captcha ID
        type: string
    type: object
  schema.Cloud:
    properties:
      btih:
        description: BTIH
        type: string
      created_at:
        description: Create time
        type: string
      id:
        description: Unique ID
        type: string
      idx:
        description: IDX
        type: string
      name:
        description: Name
        type: string
      raw_id:
        description: Raw ID
        type: string
      remark:
        description: Remark
        type: string
      size:
        description: Size
        type: integer
      source:
        description: Source
        type: string
      updated_at:
        description: Update time
        type: string
      url:
        description: URL
        type: string
    type: object
  schema.CloudForm:
    properties:
      btih:
        description: BTIH
        type: string
      idx:
        description: IDX
        type: string
      name:
        description: Name
        type: string
      raw_id:
        description: Raw ID
        type: string
      remark:
        description: Remark
        type: string
      size:
        description: Size
        type: integer
      source:
        description: Source
        type: string
      url:
        description: URL
        type: string
    required:
    - btih
    - idx
    - name
    - raw_id
    - size
    type: object
  schema.File:
    properties:
      created_at:
        description: Create time
        type: string
      fileMeta:
        type: string
      fileName:
        type: string
      fileSize:
        type: integer
      fileType:
        type: string
      files:
        allOf:
        - $ref: '#/definitions/schema.Files'
        description: 与 Folder 的关联
      id:
        type: string
      isFolder:
        type: boolean
      parentID:
        type: string
      repository:
        allOf:
        - $ref: '#/definitions/schema.Repository'
        description: 与 Repository 的关联
      repositoryID:
        type: string
      transURL:
        type: string
      updated_at:
        description: Update time
        type: string
      url:
        type: string
    type: object
  schema.FileForm:
    properties:
      createAt:
        type: string
      file_name:
        description: FileName
        type: string
      file_size:
        description: FileSize
        type: integer
      file_type:
        description: FileType
        type: string
      is_folder:
        description: IsFolder
        type: boolean
      parent_file_id:
        description: ParentFileID
        type: string
      repository_id:
        description: RepositoryID
        type: string
      trans_url:
        description: TransURL
        type: string
      updateAt:
        type: string
      url:
        description: URL
        type: string
    required:
    - file_name
    - is_folder
    type: object
  schema.Files:
    items:
      $ref: '#/definitions/schema.File'
    type: array
  schema.Logger:
    properties:
      created_at:
        description: Create time
        type: string
      data:
        description: Log data
        type: string
      id:
        description: Unique ID
        type: string
      level:
        description: Log level
        type: string
      login_name:
        description: From User.Username
        type: string
      message:
        description: Log message
        type: string
      stack:
        description: Error stack
        type: string
      tag:
        description: Log tag
        type: string
      trace_id:
        description: Trace ID
        type: string
      user_id:
        description: User ID
        type: string
      user_name:
        description: From User.Name
        type: string
    type: object
  schema.LoginForm:
    properties:
      captcha_code:
        description: Captcha verify code
        type: string
      captcha_id:
        description: Captcha verify id
        type: string
      password:
        description: Login password (md5 hash)
        type: string
      username:
        description: Login name
        type: string
    required:
    - captcha_code
    - captcha_id
    - password
    - username
    type: object
  schema.LoginToken:
    properties:
      access_token:
        description: Access token (JWT)
        type: string
      expires_at:
        description: 'Expired time (Unit: second)'
        type: integer
      token_type:
        description: 'Token type (Usage: Authorization=${token_type} ${access_token})'
        type: string
    type: object
  schema.Menu:
    properties:
      children:
        description: Child menus
        items:
          $ref: '#/definitions/schema.Menu'
        type: array
      code:
        description: Code of menu (unique for each level)
        type: string
      created_at:
        description: Create time
        type: string
      description:
        description: Details about menu
        type: string
      id:
        description: Unique ID
        type: string
      name:
        description: Display name of menu
        type: string
      parent_id:
        description: Parent ID (From Menu.ID)
        type: string
      parent_path:
        description: Parent path (split by .)
        type: string
      path:
        description: Access path of menu
        type: string
      properties:
        description: Properties of menu (JSON)
        type: string
      resources:
        description: Resources of menu
        items:
          $ref: '#/definitions/schema.MenuResource'
        type: array
      sequence:
        description: Sequence for sorting (Order by desc)
        type: integer
      status:
        description: Status of menu (enabled, disabled)
        type: string
      type:
        description: Type of menu (page, button)
        type: string
      updated_at:
        description: Update time
        type: string
    type: object
  schema.MenuForm:
    properties:
      code:
        description: Code of menu (unique for each level)
        maxLength: 32
        type: string
      description:
        description: Details about menu
        type: string
      name:
        description: Display name of menu
        maxLength: 128
        type: string
      parent_id:
        description: Parent ID (From Menu.ID)
        type: string
      path:
        description: Access path of menu
        type: string
      properties:
        description: Properties of menu (JSON)
        type: string
      resources:
        description: Resources of menu
        items:
          $ref: '#/definitions/schema.MenuResource'
        type: array
      sequence:
        description: Sequence for sorting (Order by desc)
        type: integer
      status:
        description: Status of menu (enabled, disabled)
        enum:
        - disabled
        - enabled
        type: string
      type:
        description: Type of menu (page, button)
        enum:
        - page
        - button
        type: string
    required:
    - code
    - name
    - status
    - type
    type: object
  schema.MenuResource:
    properties:
      created_at:
        description: Create time
        type: string
      id:
        description: Unique ID
        type: string
      menu_id:
        description: From Menu.ID
        type: string
      method:
        description: HTTP method
        type: string
      path:
        description: API request path (e.g. /api/v1/users/:id)
        type: string
      updated_at:
        description: Update time
        type: string
    type: object
  schema.Repository:
    properties:
      created_at:
        description: Create time
        type: string
      currentCapacity:
        description: Current capacity
        type: integer
      files:
        description: 与 File 的关联
        items:
          $ref: '#/definitions/schema.File'
        type: array
      maxCapacity:
        description: Max capacity
        type: integer
      repositoryID:
        description: always equal to UserID
        type: string
      updated_at:
        type: string
      userID:
        description: 外键，关联到用户表（如果有）
        type: string
    type: object
  schema.RepositoryForm:
    properties:
      current_capacity:
        description: Current capacity
        type: integer
      files:
        items:
          $ref: '#/definitions/schema.File'
        type: array
      max_capacity:
        description: Max capacity
        type: integer
    type: object
  schema.Role:
    properties:
      code:
        description: Code of role (unique)
        type: string
      created_at:
        description: Create time
        type: string
      description:
        description: Details about role
        type: string
      id:
        description: Unique ID
        type: string
      menus:
        description: Role menu list
        items:
          $ref: '#/definitions/schema.RoleMenu'
        type: array
      name:
        description: Display name of role
        type: string
      sequence:
        description: Sequence for sorting
        type: integer
      status:
        description: Status of role (disabled, enabled)
        type: string
      updated_at:
        description: Update time
        type: string
    type: object
  schema.RoleForm:
    properties:
      code:
        description: Code of role (unique)
        maxLength: 32
        type: string
      description:
        description: Details about role
        type: string
      menus:
        description: Role menu list
        items:
          $ref: '#/definitions/schema.RoleMenu'
        type: array
      name:
        description: Display name of role
        maxLength: 128
        type: string
      sequence:
        description: Sequence for sorting
        type: integer
      status:
        description: Status of role (enabled, disabled)
        enum:
        - disabled
        - enabled
        type: string
    required:
    - code
    - name
    - status
    type: object
  schema.RoleMenu:
    properties:
      created_at:
        description: Create time
        type: string
      id:
        description: Unique ID
        type: string
      menu_id:
        description: From Menu.ID
        type: string
      role_id:
        description: From Role.ID
        type: string
      updated_at:
        description: Update time
        type: string
    type: object
  schema.UpdateCurrentUser:
    properties:
      email:
        description: Email of user
        maxLength: 128
        type: string
      name:
        description: Name of user
        maxLength: 64
        type: string
      phone:
        description: Phone number of user
        maxLength: 32
        type: string
      remark:
        description: Remark of user
        maxLength: 1024
        type: string
    required:
    - name
    type: object
  schema.UpdateLoginPassword:
    properties:
      new_password:
        description: New password (md5 hash)
        type: string
      old_password:
        description: Old password (md5 hash)
        type: string
    required:
    - new_password
    - old_password
    type: object
  schema.User:
    properties:
      created_at:
        description: Create time
        type: string
      email:
        description: Email of user
        type: string
      id:
        description: Unique ID
        type: string
      name:
        description: Name of user
        type: string
      phone:
        description: Phone number of user
        type: string
      remark:
        description: Remark of user
        type: string
      repository:
        allOf:
        - $ref: '#/definitions/schema.Repository'
        description: Repository of user
      roles:
        description: Roles of user
        items:
          $ref: '#/definitions/schema.UserRole'
        type: array
      status:
        description: Status of user (activated, freezed)
        type: string
      updated_at:
        description: Update time
        type: string
      username:
        description: Username for login
        type: string
    type: object
  schema.UserForm:
    properties:
      email:
        description: Email of user
        maxLength: 128
        type: string
      name:
        description: Name of user
        maxLength: 64
        type: string
      password:
        description: Password for login (md5 hash)
        maxLength: 64
        type: string
      phone:
        description: Phone number of user
        maxLength: 32
        type: string
      remark:
        description: Remark of user
        maxLength: 1024
        type: string
      repository:
        $ref: '#/definitions/schema.Repository'
      roles:
        description: Roles of user
        items:
          $ref: '#/definitions/schema.UserRole'
        type: array
      status:
        description: Status of user (activated, freezed)
        enum:
        - activated
        - freezed
        type: string
      username:
        description: Username for login
        maxLength: 64
        type: string
    required:
    - name
    - roles
    - status
    - username
    type: object
  schema.UserRole:
    properties:
      created_at:
        description: Create time
        type: string
      id:
        description: Unique ID
        type: string
      role_id:
        description: From Role.ID
        type: string
      role_name:
        description: From Role.Name
        type: string
      updated_at:
        description: Update time
        type: string
      user_id:
        description: From User.ID
        type: string
    type: object
  util.ResponseResult:
    properties:
      data: {}
      error:
        $ref: '#/definitions/errors.Error'
      success:
        type: boolean
      total:
        type: integer
    type: object
info:
  contact: {}
  description: A Magnet Service API service based on golang.
  title: magnetu
  version: v1.0.0
paths:
  /api/v1/captcha/id:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Captcha'
              type: object
      summary: Get captcha ID
      tags:
      - LoginAPI
  /api/v1/captcha/image:
    get:
      parameters:
      - description: Captcha ID
        in: query
        name: id
        required: true
        type: string
      - description: Reload captcha image (reload=1)
        in: query
        name: reload
        type: number
      produces:
      - image/png
      responses:
        "200":
          description: Captcha image
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ResponseResult'
      summary: Response captcha image
      tags:
      - LoginAPI
  /api/v1/clouds:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.Cloud'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query cloud list
      tags:
      - CloudAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.CloudForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Cloud'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create cloud record
      tags:
      - CloudAPI
  /api/v1/clouds/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete cloud record by ID
      tags:
      - CloudAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Cloud'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get cloud record by ID
      tags:
      - CloudAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.CloudForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update cloud record by ID
      tags:
      - CloudAPI
  /api/v1/current/logout:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Logout system
      tags:
      - LoginAPI
  /api/v1/current/menus:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.Menu'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query current user menus based on the current user role
      tags:
      - LoginAPI
  /api/v1/current/password:
    put:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.UpdateLoginPassword'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Change current user password
      tags:
      - LoginAPI
  /api/v1/current/refresh-token:
    post:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.LoginToken'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Refresh current access token
      tags:
      - LoginAPI
  /api/v1/current/user:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get current user info
      tags:
      - LoginAPI
    put:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.UpdateCurrentUser'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update current user info
      tags:
      - LoginAPI
  /api/v1/files:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.File'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query File list
      tags:
      - FileAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.FileForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.File'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create File record
      tags:
      - FileAPI
  /api/v1/files/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete File record by ID
      tags:
      - FileAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.File'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get File record by ID
      tags:
      - FileAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.FileForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update File record by ID
      tags:
      - FileAPI
  /api/v1/loggers:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: log level
        in: query
        name: level
        type: string
      - description: trace ID
        in: query
        name: traceID
        type: string
      - description: user name
        in: query
        name: userName
        type: string
      - description: log tag
        in: query
        name: tag
        type: string
      - description: log message
        in: query
        name: message
        type: string
      - description: start time
        in: query
        name: startTime
        type: string
      - description: end time
        in: query
        name: endTime
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.Logger'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query logger list
      tags:
      - LoggerAPI
  /api/v1/login:
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.LoginForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.LoginToken'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      summary: Login system with username and password
      tags:
      - LoginAPI
  /api/v1/menus:
    get:
      parameters:
      - description: Code path of menu (like xxx.xxx.xxx)
        in: query
        name: code
        type: string
      - description: Name of menu
        in: query
        name: name
        type: string
      - description: Whether to include menu resources
        in: query
        name: includeResources
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.Menu'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query menu tree data
      tags:
      - MenuAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.MenuForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Menu'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create menu record
      tags:
      - MenuAPI
  /api/v1/menus/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete menu record by ID
      tags:
      - MenuAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Menu'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get menu record by ID
      tags:
      - MenuAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.MenuForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update menu record by ID
      tags:
      - MenuAPI
  /api/v1/netdisk:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: parent_file_id
        in: query
        name: parent_file_id
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.File'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query NetDisk list
      tags:
      - NetDiskAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.FileForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.File'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create NetDisk record
      tags:
      - NetDiskAPI
  /api/v1/netdisk/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete NetDisk record by ID
      tags:
      - NetDiskAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.File'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get NetDisk record by ID
      tags:
      - NetDiskAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.FileForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update NetDisk record by ID
      tags:
      - NetDiskAPI
  /api/v1/repositories:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: User ID
        in: query
        name: user_id
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.Repository'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query repository list
      tags:
      - RepositoryAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.RepositoryForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Repository'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create repository record
      tags:
      - RepositoryAPI
  /api/v1/repositories/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete repository record by ID
      tags:
      - RepositoryAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Repository'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get repository record by ID
      tags:
      - RepositoryAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.RepositoryForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update repository record by ID
      tags:
      - RepositoryAPI
  /api/v1/roles:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: Display name of role
        in: query
        name: name
        type: string
      - description: Status of role (disabled, enabled)
        in: query
        name: status
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.Role'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query role list
      tags:
      - RoleAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.RoleForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Role'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create role record
      tags:
      - RoleAPI
  /api/v1/roles/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete role record by ID
      tags:
      - RoleAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.Role'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get role record by ID
      tags:
      - RoleAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.RoleForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update role record by ID
      tags:
      - RoleAPI
  /api/v1/users:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: Username for login
        in: query
        name: username
        type: string
      - description: Name of user
        in: query
        name: name
        type: string
      - description: Status of user (activated, freezed)
        in: query
        name: status
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.User'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query user list
      tags:
      - UserAPI
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.UserForm'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create user record
      tags:
      - UserAPI
  /api/v1/users/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete user record by ID
      tags:
      - UserAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/schema.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get user record by ID
      tags:
      - UserAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.UserForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update user record by ID
      tags:
      - UserAPI
  /api/v1/users/{id}/reset-pwd:
    patch:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Reset user password by ID
      tags:
      - UserAPI
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
